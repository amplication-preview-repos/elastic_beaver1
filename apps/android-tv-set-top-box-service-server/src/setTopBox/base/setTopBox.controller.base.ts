/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SetTopBoxService } from "../setTopBox.service";
import { SetTopBoxCreateInput } from "./SetTopBoxCreateInput";
import { SetTopBox } from "./SetTopBox";
import { SetTopBoxFindManyArgs } from "./SetTopBoxFindManyArgs";
import { SetTopBoxWhereUniqueInput } from "./SetTopBoxWhereUniqueInput";
import { SetTopBoxUpdateInput } from "./SetTopBoxUpdateInput";

export class SetTopBoxControllerBase {
  constructor(protected readonly service: SetTopBoxService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SetTopBox })
  async createSetTopBox(
    @common.Body() data: SetTopBoxCreateInput
  ): Promise<SetTopBox> {
    return await this.service.createSetTopBox({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SetTopBox] })
  @ApiNestedQuery(SetTopBoxFindManyArgs)
  async setTopBoxes(@common.Req() request: Request): Promise<SetTopBox[]> {
    const args = plainToClass(SetTopBoxFindManyArgs, request.query);
    return this.service.setTopBoxes({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SetTopBox })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async setTopBox(
    @common.Param() params: SetTopBoxWhereUniqueInput
  ): Promise<SetTopBox | null> {
    const result = await this.service.setTopBox({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SetTopBox })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSetTopBox(
    @common.Param() params: SetTopBoxWhereUniqueInput,
    @common.Body() data: SetTopBoxUpdateInput
  ): Promise<SetTopBox | null> {
    try {
      return await this.service.updateSetTopBox({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SetTopBox })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSetTopBox(
    @common.Param() params: SetTopBoxWhereUniqueInput
  ): Promise<SetTopBox | null> {
    try {
      return await this.service.deleteSetTopBox({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
