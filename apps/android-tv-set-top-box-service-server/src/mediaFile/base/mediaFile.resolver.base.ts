/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MediaFile } from "./MediaFile";
import { MediaFileCountArgs } from "./MediaFileCountArgs";
import { MediaFileFindManyArgs } from "./MediaFileFindManyArgs";
import { MediaFileFindUniqueArgs } from "./MediaFileFindUniqueArgs";
import { DeleteMediaFileArgs } from "./DeleteMediaFileArgs";
import { MediaFileService } from "../mediaFile.service";
@graphql.Resolver(() => MediaFile)
export class MediaFileResolverBase {
  constructor(protected readonly service: MediaFileService) {}

  async _mediaFilesMeta(
    @graphql.Args() args: MediaFileCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MediaFile])
  async mediaFiles(
    @graphql.Args() args: MediaFileFindManyArgs
  ): Promise<MediaFile[]> {
    return this.service.mediaFiles(args);
  }

  @graphql.Query(() => MediaFile, { nullable: true })
  async mediaFile(
    @graphql.Args() args: MediaFileFindUniqueArgs
  ): Promise<MediaFile | null> {
    const result = await this.service.mediaFile(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MediaFile)
  async deleteMediaFile(
    @graphql.Args() args: DeleteMediaFileArgs
  ): Promise<MediaFile | null> {
    try {
      return await this.service.deleteMediaFile(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
