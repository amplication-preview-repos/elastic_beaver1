/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MediaFileService } from "../mediaFile.service";
import { MediaFileCreateInput } from "./MediaFileCreateInput";
import { MediaFile } from "./MediaFile";
import { MediaFileFindManyArgs } from "./MediaFileFindManyArgs";
import { MediaFileWhereUniqueInput } from "./MediaFileWhereUniqueInput";
import { MediaFileUpdateInput } from "./MediaFileUpdateInput";

export class MediaFileControllerBase {
  constructor(protected readonly service: MediaFileService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MediaFile })
  async createMediaFile(
    @common.Body() data: MediaFileCreateInput
  ): Promise<MediaFile> {
    return await this.service.createMediaFile({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MediaFile] })
  @ApiNestedQuery(MediaFileFindManyArgs)
  async mediaFiles(@common.Req() request: Request): Promise<MediaFile[]> {
    const args = plainToClass(MediaFileFindManyArgs, request.query);
    return this.service.mediaFiles({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MediaFile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async mediaFile(
    @common.Param() params: MediaFileWhereUniqueInput
  ): Promise<MediaFile | null> {
    const result = await this.service.mediaFile({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MediaFile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMediaFile(
    @common.Param() params: MediaFileWhereUniqueInput,
    @common.Body() data: MediaFileUpdateInput
  ): Promise<MediaFile | null> {
    try {
      return await this.service.updateMediaFile({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MediaFile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMediaFile(
    @common.Param() params: MediaFileWhereUniqueInput
  ): Promise<MediaFile | null> {
    try {
      return await this.service.deleteMediaFile({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
