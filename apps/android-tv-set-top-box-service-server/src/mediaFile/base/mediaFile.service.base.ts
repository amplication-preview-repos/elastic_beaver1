/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, MediaFile as PrismaMediaFile } from "@prisma/client";

export class MediaFileServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MediaFileCountArgs, "select">
  ): Promise<number> {
    return this.prisma.mediaFile.count(args);
  }

  async mediaFiles(
    args: Prisma.MediaFileFindManyArgs
  ): Promise<PrismaMediaFile[]> {
    return this.prisma.mediaFile.findMany(args);
  }
  async mediaFile(
    args: Prisma.MediaFileFindUniqueArgs
  ): Promise<PrismaMediaFile | null> {
    return this.prisma.mediaFile.findUnique(args);
  }
  async createMediaFile(
    args: Prisma.MediaFileCreateArgs
  ): Promise<PrismaMediaFile> {
    return this.prisma.mediaFile.create(args);
  }
  async updateMediaFile(
    args: Prisma.MediaFileUpdateArgs
  ): Promise<PrismaMediaFile> {
    return this.prisma.mediaFile.update(args);
  }
  async deleteMediaFile(
    args: Prisma.MediaFileDeleteArgs
  ): Promise<PrismaMediaFile> {
    return this.prisma.mediaFile.delete(args);
  }
}
